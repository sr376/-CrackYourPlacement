class Solution {
  int[] parent;
  int[] rank;

  int find(int x) {
    if (parent[x] != x) {
      parent[x] = find(parent[x]);
    }
    return parent[x];
  }

  void union(int x, int y) {
    int xroot = find(x);
    int yroot = find(y);
    if (xroot != yroot) {
      if (rank[xroot] > rank[yroot]) {
        parent[yroot] = xroot;
      } else {
        parent[xroot] = parent[yroot];
        if (rank[xroot] == rank[yroot]) {
          rank[yroot]++;
        }
      }
    }
  }

  public int[] findRedundantConnection(int[][] edges) {
    
    parent = new int[edges.length];
    for (int i = 0; i < edges.length; i++) {
      parent[i] = i;
    }
    rank = new int[edges.length];

    for (int[] edge : edges) {
      int a = edge[0] - 1;
      int b = edge[1] - 1;
      if (find(a) == find(b)) {
        return edge;
      }
      union(a, b);
    }
    return null;
  }
}
