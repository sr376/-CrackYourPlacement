Farmer John has built a new long barn, with N (2 <= N <= 100,000) stalls. The stalls are located along a straight line at positions x1 ... xN (0 <= xi <= 1,000,000,000).

His C (2 <= C <= N) cows don't like this barn layout and become aggressive towards each other once put into a stall. To prevent the cows from hurting each other, FJ wants to assign the cows to the stalls, such that the minimum distance between any two of them is as large as possible. What is the largest minimum distance?
Input
t â€“ the number of test cases, then t test cases follows.
* Line 1: Two space-separated integers: N and C
* Lines 2..N+1: Line i+1 contains an integer stall location, xi
Output
For each test case output one integer: the largest minimum distance.
Example
Input:

1
5 3
1
2
8
4
9
Output:

3
Output details:

FJ can put his 3 cows in the stalls at positions 1, 4 and 8,
resulting in a minimum distance of 3.




import java.util.Arrays;
import java.util.Scanner;

public class AggressiveCows {
    // Function to check if a distance D is feasible for placing cows
    private static boolean isFeasible(int[] stalls, int n, int cows, int distance) {
        int count = 1; // place the first cow in the first stall
        int lastPosition = stalls[0]; // track the position of the last placed cow
        
        for (int i = 1; i < n; i++) {
            if (stalls[i] - lastPosition >= distance) {
                count++; // place another cow
                lastPosition = stalls[i];
                
                if (count == cows) {
                    return true;
                }
            }
        }
        
        return false;
    }
    
    public static int largestMinimumDistance(int[] stalls, int n, int cows) {
        Arrays.sort(stalls); // Sort stall positions
        
        int low = 1;
        int high = stalls[n - 1] - stalls[0];
        int result = 0;
        
        while (low <= high) {
            int mid = (low + high) / 2;
            
            if (isFeasible(stalls, n, cows, mid)) {
                result = mid; // update result to the current mid
                low = mid + 1; // try for a larger minimum distance
            } else {
                high = mid - 1; // reduce the distance and try
            }
        }
        
        return result;
    }
    
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt(); // number of test cases
        
        while (t-- > 0) {
            int n = scanner.nextInt();
            int c = scanner.nextInt();
            
            int[] stalls = new int[n];
            for (int i = 0; i < n; i++) {
                stalls[i] = scanner.nextInt();
            }
            
            int answer = largestMinimumDistance(stalls, n, c);
            System.out.println(answer);
        }
        
        scanner.close();
    }
}
