public class BoyerMoore {

    // Preprocess the pattern to create the bad character heuristic table
    private static HashMap<Character, Integer> badCharacterTable(String pattern) {
        HashMap<Character, Integer> table = new HashMap<>();
        int m = pattern.length();

        for (int i = 0; i < m - 1; i++) {
            table.put(pattern.charAt(i), m - 1 - i);
        }

        return table;
    }

    // Boyer-Moore string search algorithm
    public static int search(String text, String pattern) {
        int n = text.length();
        int m = pattern.length();

        if (m == 0 || n < m) {
            return -1;  // If pattern is empty or text is smaller than pattern, return -1
        }

        HashMap<Character, Integer> badCharTable = badCharacterTable(pattern);
        int skip;

        for (int i = 0; i <= n - m; i += skip) {
            skip = 0;

            for (int j = m - 1; j >= 0; j--) {
                if (pattern.charAt(j) != text.charAt(i + j)) {
                    skip = badCharTable.getOrDefault(text.charAt(i + j), m);
                    break;
                }
            }

            if (skip == 0) {
                return i; // Pattern found at index i
            }
        }

        return -1; // Pattern not found
    }
