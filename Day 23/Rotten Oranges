class Solution {
    public int orangesRotting(int[][] grid) {
        if (grid.length == 0) return -1;

        int rows = grid.length;
        int cols = grid[0].length;
        int fresh = 0;
        Queue<int[]> rottenQueue = new LinkedList<>();

        // Initialize the queue with all currently rotten oranges and count fresh oranges.
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (grid[i][j] == 2) {
                    rottenQueue.add(new int[]{i, j});
                } else if (grid[i][j] == 1) {
                    fresh++;
                }
            }
        }

        if (fresh == 0) return 0;

        int time = 0;
        int[][] directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};

        // BFS traversal
        while (!rottenQueue.isEmpty()) {
            int size = rottenQueue.size();
            boolean anyRotten = false;

            for (int i = 0; i < size; i++) {
                int[] point = rottenQueue.poll();
                int row = point[0];
                int col = point[1];

                for (int[] direction : directions) {
                    int newRow = row + direction[0];
                    int newCol = col + direction[1];

                    if (newRow >= 0 && newRow < rows && newCol >= 0 && newCol < cols && grid[newRow][newCol] == 1) {
                        grid[newRow][newCol] = 2;
                        fresh--;
                        rottenQueue.add(new int[]{newRow, newCol});
                        anyRotten = true;
                    }
                }
            }

            if (anyRotten) {
                time++;
            }
        }

        return fresh == 0 ? time : -1;
    }
}
