class Solution {
    public int largestIsland(int[][] grid) {
        Map<Integer, Integer> map = new HashMap<>();
        int startId = 2;
        int res = 0;
        
        for(int i=0;i<grid.length;i++) {
            for(int j=0;j<grid[i].length;j++) {
                if(grid[i][j] == 1) {
                    map.put(startId, dfs(grid, i, j, startId));
                    res = Math.max(res, map.get(startId));
                    startId++;
                }
            }
        }

        for(int i=0;i<grid.length;i++) {
            for(int j= 0;j<grid[i].length;j++) {
                if(grid[i][j] == 0) {
                    Set<Integer> set = new HashSet<>();

                    int count = 1;

                    if(isValid(grid, i-1, j) && grid[i-1][j] > 1 && !set.contains(grid[i-1][j])) {
                        set.add(grid[i-1][j]);
                        count += map.get(grid[i-1][j]);
                    }

                    if(isValid(grid, i+1, j) && grid[i+1][j] > 1 && !set.contains(grid[i+1][j])) {
                        set.add(grid[i+1][j]);
                        count += map.get(grid[i+1][j]);
                    }

                    if(isValid(grid, i, j-1) && grid[i][j-1] > 1 && !set.contains(grid[i][j-1])) {
                        set.add(grid[i][j-1]);
                        count += map.get(grid[i][j-1]);
                    }

                    if(isValid(grid, i, j+1) && grid[i][j+1] > 1 && !set.contains(grid[i][j+1])) {
                        set.add(grid[i][j+1]);
                        count += map.get(grid[i][j+1]);
                    }

                    res = Math.max(res, count);
                }
            }
        }

        System.out.println(map);
        return res;
    }

    public boolean isValid(int[][] grid, int i, int j) {
        if (i < 0 || j < 0 || i >= grid.length || j >= grid[0].length) return false;
        else return true;
    }
 
    public int dfs(int[][] grid, int i, int j, int marker) {
        int count = 0;
        if(i < 0 || j < 0 || i >= grid.length || j >= grid[0].length || grid[i][j] != 1) return 0;

        grid[i][j] = marker;

        count += dfs(grid, i-1, j, marker);
        count += dfs(grid, i+1, j, marker);
        count += dfs(grid, i, j - 1, marker);
        count += dfs(grid, i, j + 1, marker);

        return count + 1;
    }
}
